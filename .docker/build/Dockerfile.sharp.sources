FROM mcr.microsoft.com/dotnet/sdk:9.0 AS Build

# Install system dependencies.
RUN set -x \
    && apt-get update \
    && apt-get install -y \
        unzip \
        wget

# Publish neo-cli from source as a self-contained deployment into /neo-cli folder (all dependant .dlls are included).
# See https://docs.microsoft.com/ru-ru/dotnet/core/deploying/#publish-self-contained for details.
ENV REVISION="afe7e060b4c9bd5981deab36dda70175558d5d41"
RUN wget -O /tmp/neo-cli.zip https://github.com/neo-project/neo/archive/${REVISION}.zip && \
    unzip -q -d /tmp/neo-node/ /tmp/neo-cli.zip && \
    dotnet publish -c Release --framework net9.0 -o /neo-cli /tmp/neo-node/*/src/Neo.CLI && \
    mkdir /neo-cli/Plugins

# Publish required neo-modules and move them into corresponding neo-cli/Plugins folder.
ENV MODULES="LevelDBStore DBFTPlugin RpcServer StateService StorageDumper ApplicationLogs"
# StateService StorageDumper ApplicationLogs
RUN for mod in ${MODULES}; do \
        dotnet publish -c Release --framework net9.0 /tmp/neo-node/*/src/Plugins/${mod}/; \
        mkdir /neo-cli/Plugins/${mod}; \
        mv /tmp/neo-node/*/bin/Neo.Plugins.${mod}/net9.0/${mod}.dll /neo-cli/Plugins/${mod}/; \
    done

# All things are published, so build the final image by copying binaries from Build
FROM mcr.microsoft.com/dotnet/aspnet:9.0 as Final

# Frontend non-interactive
ENV DEBIAN_FRONTEND noninteractive

# Disable dotnet usage information collection
# https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#behavior
ENV DOTNET_CLI_TELEMETRY_OPTOUT 1

# Install system dependencies. always should be done in one line
# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run
RUN set -x \
    && apt-get update \
    && apt-get install -y \
        libleveldb-dev \
        curl \
        jq \
        libssl-dev \
        libunwind8 \
        librocksdb-dev \
        libc6-dev \
        iproute2 \
    # APT cleanup to reduce image size
    && rm -rf /var/lib/apt/lists/*

# Copy neo-cli and all dependant .dlls from Build
COPY --from=Build /neo-cli /neo-cli/

WORKDIR /neo-cli

RUN chmod +x /neo-cli/neo-cli

COPY ./sharp.entrypoint.sh /entrypoint.sh
COPY ./sharp.healthcheck.sh /healthcheck.sh
COPY ./sharp.rpc.config.json /neo-cli/Plugins/RpcServer/RpcServer.json
COPY ./sharp.dbft.config.json /neo-cli/Plugins/DBFTPlugin/DBFTPlugin.json
COPY ./sharp.stateservice.config.json /neo-cli/Plugins/StateService/StateService.json
COPY ./sharp.storagedumper.config.json /neo-cli/Plugins/StorageDumper/StorageDumper.json
COPY ./sharp.applicationlogs.config.json /neo-cli/Plugins/ApplicationLogs/ApplicationLogs.json

ENTRYPOINT [ "/entrypoint.sh" ]
